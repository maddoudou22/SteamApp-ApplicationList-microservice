AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: deploiement de l'application Steam Check Price Evolution
    # - Role 'SteamApp-coordinator-role-formation' : role porte par la fonction 'SteamApp-coordinator-lambda-formation' pour lui donner les droits suivants :
    #   - Accès total à CloudWatch
    #   - Publication de messages dans la file SQS
    # - Fonction Lambda 'SteamApp-coordinator-lambda-formation' : point d'entree de l'application :
    #   1) Recupere la liste des applications steam aupres de la fonction 'SteamApp-applicationList-formation' via son API Gateway
    #   2) Envoie un message a SQS pour chaque application.
    # - Table DynamoDB 'SteamApp-table-formation' : liste l'ensemble des applications Steams pour lesquelles on souhaite verifier le prix
    # - API Gateway 'SteamApp-applicationList-APIG-formation' : trigger de la fonction 'SteamApp-applicationList-formation'
    # - Role 'SteamApp-applicationList-role-formation' : role porte par la fonction 'SteamApp-applicationList-lambda-formation' pour lui donner les droits suivants :
    #   - Accès total à CloudWatch
    #   - Scan de la table DynamoDB
    # - Fonction Lambda 'SteamApp-applicationList-lambda-formation' : invoquee via l'API Gateway et renvoyant la liste des applications depuis la table DynamoDB
    # - File de message SQS 'SteamApp-SQSqueue-formation' : transmet les messages contenant les identifiants de chaque application Steam pour la fonction 'steamCheckPriceSQS-formation' 
    # - Role 'SteamApp-checkPrice-role-formation' : role porte par la fonction 'SteamApp-checkPrice-lambda-formation' pour lui donner les droits suivants :
    #   - Accès total à CloudWatch
    #   - Recuperation de messages dans SQS
    #   - Publication de SMS via SNS
    # - Fonction Lambda 'SteamApp-checkPrice-lambda-formation' : declenchee par la file SQS :
    #   1) Recupere l'ID de l'application a verifier depuis le message SQS
    #   2) Recupere le detail des informations de l'application via une requete aupres de l'API Steam
    #   3) Verifie si le prix a evolue ou non
    #   4) Publie un SMS via SNS si le prix a ete revu a la baisse
    # - Topic SNS 'SteamApp-SNStopic-formation' : topic appelle par la fonction Lambda 'SteamApp-checkPrice-lambda-formation' pour publier un SMS
    # - Souscription SNS 'SteamApp-SNSsubscription-formation' : enregistre le numero de telephone vers lequel le SMS doit etre envoye
    
    
Parameters:
  applicationName:
    Description: "The name of the alias pointing on the last working version of the Lambda function"
    Type: 'String'
    Default: "dev"
    
  environnement:
    Description: "Environnement de déploiement"
    Type: 'String'
    Default: "dev"

  steamUrl:
    Description: "URL de Steam utilisee pour recuperer le prix de chaque application"
    Type: 'String'
    Default: "https://store.steampowered.com/api/appdetails?appids="

    
Resources:

#--------------------------------------------------------------------------------------------------------------------------------
#---- Microservice de persistance des applications ------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------

  # Table DynamoDB 'SteamApp-table-formation' : liste l'ensemble des applications Steams pour lesquelles on souhaite verifier le prix
  SteamApptableformation:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "SteamApp-table-formation"
      AttributeDefinitions:
        -
          AttributeName: "phonetiqueAlexa"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "phonetiqueAlexa"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  # Permission d'invocation de la fonction Lambda 'SteamAppApplicationListLambdaFormation' par l'API Gateway 'SteamAppApplicationListAPIGformation'. Cette permission doit être créée avant la ressource de l'API Gateway dans ce template.
  ApiGatewayLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "SteamAppApplicationListLambdaFormation"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*
        
        
  # API Gateway 'SteamApp-applicationList-APIG-formation' : trigger de la fonction 'SteamApp-applicationList-formation'
  SteamAppApplicationListAPIGformation:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref environnement
      DefinitionBody:
        ### SWAGGER_START !!! DO NOT ALTER THIS LINE !!!
            swagger: 2.0
            info:
              title: "SteamApp-applicationList-APIG-formation"
            #basePath: /${environnement}
            schemes:
            - https
            paths:
              "/":
                get:
                  produces:
                  - application/json
                  responses:
                    '200':
                      description: 200 response
                      schema:
                        $ref: "#/definitions/Empty"
        ### SWAGGER_END !!! DO NOT ALTER THIS LINE !!!
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: 200
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SteamAppApplicationListLambdaFormation.Arn}/invocations
                    passthroughBehavior: when_no_match
                    httpMethod: POST # Pour l'appel de fonction Lambda c'est toujours POST, même lorsqu'on en fait que du GET
                    type: aws
            definitions:
              Empty:
                type: object
                title: Empty Schema

                
  # - Role 'SteamApp-applicationList-role-formation' : role porte par la fonction 'SteamApp-applicationList-lambda-formation' pour lui donner les droits suivants :
  #   - Accès total à CloudWatch
  #   - Scan de la table DynamoDB
  SteamAppApplicationListRoleFormation: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          #
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 
                - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "SteamApp-applicationList-Policy-formation"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              # Autorisation de scanner la table DynamoDB :
              - Effect: "Allow"
                Action: 
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                Resource: !GetAtt SteamApptableformation.Arn
              # Autorisation de creer des logs dans CloudWatch :
              - Effect: "Allow"
                Action: 
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                Resource: "*"

                
  # Fonction Lambda 'SteamApp-applicationList-lambda-formation' : invoquee via l'API Gateway et renvoyant la liste des applications depuis la table DynamoDB
  SteamAppApplicationListLambdaFormation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'SteamApp-applicationList-lambda-formation'
      Handler: index.handler
      Role: !GetAtt SteamAppApplicationListRoleFormation.Arn
      Runtime: nodejs8.10
      Timeout: 6
      CodeUri: S3://steamappformation/SteamApplicationList-Workstation.zip
      # X-Ray doit être activé manuellement via le paramètre 'ActiveTracing' dans la console de chaque fonction Lambda
      #TracingConfig: # Activation de X-ray : supporté pour "AWS::Lambda::Function" mais pas "AWS::Serverless::Function". "AWS::Lambda::Function" n'intègre pas aussi bien les API gateway
      #  Mode: "Active"
        
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref SteamApptableformation
          
      Events:
        PostApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref SteamAppApplicationListAPIGformation
            Path: /
            Method: get


#--------------------------------------------------------------------------------------------------------------------------------
#---- Microservice de comparaisons de prix d'application ------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------


  # Stream Kafka 'SteamApp-stream-formation' : transmet les messages contenant les identifiants de chaque application Steam pour la fonction 'steamCheckPriceSQS-formation' 
  SteamAppStreamFormation:
      Type: "AWS::Kinesis::Stream"
      Properties:
        Name: "SteamApp-stream-formation"
        ShardCount: 1
  
  # Déclaration du stream Kinesis 'SteamAppStreamFormation' comme Trigger de la fonction Lambda 'SteamAppCheckPriceLambdaFormation' :
  SteamAppStreamEventSource:
    Type: "AWS::Lambda::EventSourceMapping"
    DependsOn : 
      - "SteamAppCheckPriceLambdaFormation"
      - "SteamAppCheckPriceLambdaRoleFormation"
    Properties: 
      BatchSize: 10
      EventSourceArn:
        Fn::GetAtt:
          - "SteamAppStreamFormation"
          - "Arn"
      FunctionName: 
        Fn::GetAtt: 
          - "SteamAppCheckPriceLambdaFormation"
          - "Arn"
      StartingPosition: "TRIM_HORIZON"
  
  
  # - Role 'SteamApp-applicationList-role-formation' : role porte par la fonction 'SteamApp-applicationList-lambda-formation' pour lui donner les droits suivants :
  #   - Accès total à CloudWatch
  #   - Scan de la table DynamoDB
  SteamAppCheckPriceLambdaRoleFormation: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          #
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 
                - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "SteamApp-applicationList-Policy-formation"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              # Autorisation de recuperer des messages depuis un stream Kinesis :
              - Effect: "Allow"
                Action:
                    - kinesis:GetRecords
                    - kinesis:GetShardIterator
                    - kinesis:DescribeStream
                    - kinesis:ListStreams
                Resource:
                    - Fn::GetAtt:
                      - SteamAppStreamFormation
                      - Arn
              # Autorisation d'envoyer des SMS via SNS :
              - Effect: "Allow"
                Action: 
                    - sns:Publish
                Resource: 'arn:aws:sns:eu-west-1:962109799108:SteamEvolutionPrix' #!GetAtt SteamAppStreamFormation.Arn
              # Autorisation de creer des logs dans CloudWatch :
              - Effect: "Allow"
                Action: 
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                Resource: "*"

                
  # - Fonction Lambda 'SteamApp-checkPrice-lambda-formation' : declenchee par la file SQS :
  #   1) Recupere l'ID de l'application a verifier depuis le message SQS
  #   2) Recupere le detail des informations de l'application via une requete aupres de l'API Steam
  #   3) Verifie si le prix a evolue ou non
  #   4) Publie un SMS via SNS si le prix a ete revu a la baisse
  SteamAppCheckPriceLambdaFormation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'SteamApp-checkPrice-lambda-formation'
      Handler: index.handler
      Role: !GetAtt SteamAppCheckPriceLambdaRoleFormation.Arn
      Runtime: nodejs8.10
      Timeout: 6
      CodeUri: S3://steamappformation/steamCheckPriceKinesis-Workstation.zip
      # X-Ray doit être activé manuellement via le paramètre 'ActiveTracing' dans la console de chaque fonction Lambda
      #TracingConfig: # Activation de X-ray : supporté pour "AWS::Lambda::Function" mais pas "AWS::Serverless::Function". "AWS::Lambda::Function" n'intègre pas aussi bien les API gateway
      #  Mode: "Active"
        
      Environment:
        Variables:
          SNS_TOPIC_ARN: 'arn:aws:sns:eu-west-1:962109799108:SteamEvolutionPrix' #!Ref SteamApptableformation
          STEAM_URL: !Ref steamUrl


#--------------------------------------------------------------------------------------------------------------------------------
#---- Coordinator ---------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------

          
 
  # Role 'SteamApp-coordinator-role-formation' : role porte par la fonction 'SteamApp-coordinator-lambda-formation' pour lui donner les droits suivants :
  #   - Accès total à CloudWatch
  #   - Publication de messages dans la file SQS
  SteamAppCoordinatorRoleFormation: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          #
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 
                - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "SteamApp-coordinator-Policy-formation"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              # Autorisation de pousser des messages dans Kinesis :
              - Effect: "Allow"
                Action: 
                    - kinesis:PutRecord
                    - kinesis:PutRecords
                Resource: !GetAtt SteamAppStreamFormation.Arn
              # Autorisation de creer des logs dans CloudWatch :
              - Effect: "Allow"
                Action: 
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                Resource: "*"

  # Fonction Lambda 'SteamApp-coordinator-lambda-formation' : point d'entree de l'application :
  #   1) Recupere la liste des applications steam aupres de la fonction 'SteamApp-applicationList-formation' via son API Gateway
  #   2) Envoie un message a SQS pour chaque application.
  SteamAppCoordinatorLambdaFormation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'SteamApp-coordinator-lambda-formation'
      Handler: index.handler
      Role: !GetAtt SteamAppCoordinatorRoleFormation.Arn
      Runtime: nodejs8.10
      Timeout: 6
      CodeUri: S3://steamappformation/steamCoordinatorKinesis-Workstation.zip
      # X-Ray doit être activé manuellement via le paramètre 'ActiveTracing' dans la console de chaque fonction Lambda
      #TracingConfig: # Activation de X-ray : supporté pour "AWS::Lambda::Function" mais pas "AWS::Serverless::Function". "AWS::Lambda::Function" n'intègre pas aussi bien les API gateway
      #  Mode: "Active"
        
      Environment:
        Variables:
          KINESIS_STREAM_NAME: !Ref SteamAppStreamFormation
          URLsteamApplicationList:
              Fn::Join:
                - ""
                - - "https://"
                  - Ref: "SteamAppApplicationListAPIGformation"
                  - ".execute-api."
                  - !Ref "AWS::Region"
                  - ".amazonaws.com/"
                  - Ref: environnement
 
 

#--------------------------------------------------------------------------------------------------------------------------------
#---- Outputs -------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------

Outputs:
    kinesisStreamName:
        Description: Kinesis Stream Name
        Value: !Ref SteamAppStreamFormation
    apigurl:
        Description: API Gateway URL
        Value: 
            Fn::Join:
            - ""
            - - "https://"
              - Ref: "SteamAppApplicationListAPIGformation"
              - ".execute-api."
              - !Ref "AWS::Region"
              - ".amazonaws.com/"
              - Ref: environnement
